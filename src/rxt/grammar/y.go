// Code generated by goyacc parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package main

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"errors"

	"fmt"
	"github.com/davecgh/go-spew/spew"
	"github.com/simelo/rextporter/src/config"
	"github.com/simelo/rextporter/src/memconfig"
	"strings"
	// "os"
	// "github.com/simelo/rextporter/src/util"
)

var (
	ErrBlockLevelUnderflow = errors.New("End of block is not possible beyond DATABASE")
	ErrBlockLevelOverflow  = errors.New("Too many nested syntax levels")
)

type strTuple struct {
	key string
	val string
}

func newStrTuple(s1, s2 string) *strTuple {
	return &strTuple{
		key: s1,
		val: s2,
	}
}

// FIXME : Not global. Parser stack ? TLS ?
var root config.RextRoot
var service config.RextServiceDef

func init() {
	// TODO(denisacostaq@gmail.com): services
	root = memconfig.NewRootConfig(nil)
	service = &memconfig.Service{}
}

//line parser.go.y:44
type yySymType struct {
	yys        int
	root       config.RextRoot
	service    config.RextServiceDef
	services   []config.RextServiceDef
	resource   config.RextResourceDef
	resources  []config.RextResourceDef
	decoder    config.RextDecoderDef
	nodeSolver config.RextNodeSolver
	metric     config.RextMetricDef
	metrics    []config.RextMetricDef
	label      config.RextLabelDef
	auth       config.RextAuthDef
	options    config.RextKeyValueStore
	key        string
	strval     string
	strlist    []string
	pair       *strTuple
	identVal   int
}

const GET = 57346
const POST = 57347
const COUNTER = 57348
const GAUGE = 57349
const HISTOGRAM = 57350
const SUMMARY = 57351
const IDENTIFIER = 57352
const STR_LITERAL = 57353
const RESOURCE_PATH = 57354
const FROM = 57355
const HELP = 57356
const LABELS = 57357
const METRIC = 57358
const NAME = 57359
const SET = 57360
const TYPE = 57361
const TO = 57362
const DESCRIPTION = 57363
const WITH_OPTIONS = 57364
const AS = 57365
const BIE = 57366
const BLK = 57367
const EOB = 57368
const EOL = 57369
const CTX = 57370
const EOF = 57371
const COMMA = 57372
const DEFINE_AUTH = 57373
const EXTRACT_USING = 57374
const FOR_SERVICE = 57375
const FOR_STACK = 57376
const DATASET = 57377

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"GET",
	"POST",
	"COUNTER",
	"GAUGE",
	"HISTOGRAM",
	"SUMMARY",
	"IDENTIFIER",
	"STR_LITERAL",
	"RESOURCE_PATH",
	"FROM",
	"HELP",
	"LABELS",
	"METRIC",
	"NAME",
	"SET",
	"TYPE",
	"TO",
	"DESCRIPTION",
	"WITH_OPTIONS",
	"AS",
	"BIE",
	"BLK",
	"EOB",
	"EOL",
	"CTX",
	"EOF",
	"COMMA",
	"DEFINE_AUTH",
	"EXTRACT_USING",
	"FOR_SERVICE",
	"FOR_STACK",
	"DATASET",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:440

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 98

var yyAct = [...]int{

	32, 64, 16, 33, 4, 11, 30, 31, 8, 59,
	95, 20, 96, 37, 83, 82, 67, 66, 38, 37,
	72, 57, 18, 12, 3, 55, 54, 14, 90, 68,
	61, 50, 48, 29, 22, 5, 89, 88, 40, 17,
	43, 42, 75, 34, 87, 71, 65, 41, 23, 45,
	13, 51, 97, 53, 79, 78, 80, 81, 93, 2,
	92, 73, 19, 60, 62, 46, 44, 39, 69, 36,
	35, 15, 21, 6, 7, 9, 10, 25, 52, 49,
	26, 56, 58, 24, 63, 76, 84, 85, 91, 47,
	86, 94, 70, 74, 77, 28, 27, 1,
}
var yyPact = [...]int{

	-3, -1000, -31, -1000, 10, -25, -29, -4, 61, 17,
	-5, 61, -1000, -19, -1000, -1000, -1000, 9, -1000, -19,
	61, 2, 25, -1000, -1000, -1000, -1000, 60, 59, -1000,
	-1000, -1000, -8, -1000, 56, 15, 34, 25, -1000, 20,
	55, 37, -1000, 54, 7, 6, -1000, -1000, 17, -1000,
	17, 0, -1, -6, -1000, -1000, -1000, -23, -1000, 52,
	5, 17, 30, -10, -1000, 4, 30, -1000, 28, -1000,
	-7, 50, 23, -1000, -1000, 48, -12, -1000, -1000, -1000,
	-1000, -1000, 22, -1000, -1000, -1000, -1000, 3, 49, 47,
	25, -20, -1000, -1000, -14, 41, -1000, -1000,
}
var yyPgo = [...]int{

	0, 97, 96, 95, 94, 93, 27, 92, 90, 2,
	3, 0, 89, 88, 50, 87, 86, 1, 85, 84,
	83, 82, 81, 80, 79, 78, 77, 76, 75, 74,
	73, 72, 59,
}
var yyR1 = [...]int{

	0, 2, 3, 3, 4, 4, 4, 4, 6, 10,
	11, 11, 11, 13, 13, 14, 14, 15, 7, 5,
	8, 18, 18, 16, 16, 16, 17, 19, 19, 21,
	22, 22, 24, 24, 25, 23, 12, 26, 9, 9,
	27, 28, 28, 29, 30, 30, 20, 20, 31, 31,
	32, 32, 1,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 1, 3, 1, 3, 2, 2, 2,
	2, 0, 3, 1, 1, 4, 7, 1, 3, 6,
	0, 2, 0, 3, 2, 5, 3, 5, 0, 4,
	2, 0, 2, 2, 0, 2, 1, 1, 0, 2,
	0, 1, 7,
}
var yyChk = [...]int{

	-1000, -1, -32, 27, 35, 25, -30, -29, 33, -28,
	-27, 34, 27, -14, -6, 10, -9, 22, 27, -14,
	30, -31, 25, -6, -20, -26, -23, -2, -3, 31,
	4, 5, -11, -10, 18, 10, 10, 27, 26, 11,
	23, 13, -10, 20, 11, 12, 11, -12, 25, -24,
	25, -9, -25, -9, 26, 26, -22, 27, -21, 32,
	11, 25, -9, -19, -17, 16, 27, 26, 25, -17,
	-7, 17, 27, 11, -5, 19, -18, -4, 7, 6,
	8, 9, 27, 26, -16, -15, -8, 22, 15, 14,
	25, -13, 11, 11, -11, 30, 26, 11,
}
var yyDef = [...]int{

	50, -2, 0, 51, 0, 44, 41, 0, 0, 38,
	0, 0, 45, 43, 15, 8, 48, 0, 42, 40,
	0, 52, 12, 16, 49, 46, 47, 0, 0, 1,
	2, 3, 0, 10, 0, 0, 0, 0, 39, 0,
	0, 0, 11, 0, 0, 32, 9, 37, 38, 35,
	38, 0, 0, 30, 36, 33, 34, 0, 31, 0,
	0, 38, 0, 0, 27, 0, 0, 29, 0, 28,
	0, 0, 0, 18, 21, 0, 0, 19, 4, 5,
	6, 7, 0, 26, 22, 23, 24, 0, 0, 0,
	12, 17, 13, 20, 0, 0, 25, 14,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.key = "AUTH"
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:93
		{
			yyVAL.key = yyDollar[1].key
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:95
		{
			yyVAL.key = yyDollar[1].key
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:98
		{
			yyVAL.key = config.KeyMetricTypeGauge
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.key = config.KeyMetricTypeCounter
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.key = config.KeyMetricTypeHistogram
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:104
		{
			yyVAL.key = config.KeyMetricTypeSummary
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:107
		{
			yyVAL.strval = yyDollar[1].strval
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.options = memconfig.NewOptionsMap()
			// TODO(denisacostaq@gmail.com): handle errors
			_, _ = yyVAL.options.SetString(yyDollar[2].strval, yyDollar[4].strval)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:117
		{
			yyVAL.options = memconfig.NewOptionsMap()
			for _, k := range yyDollar[1].options.GetKeys() {
				// TODO(denisacostaq@gmail.com): handle errors
				v, _ := yyDollar[1].options.GetObject(k)
				// TODO(denisacostaq@gmail.com): handle errors
				_, _ = yyVAL.options.SetObject(k, v)
			}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:127
		{
			// TODO(denisacostaq@gmail.com): handle errors and previously exist
			yyVAL.options, _ = memconfig.MergeStoresInANewOne(yyDollar[1].options, yyDollar[3].options)
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:132
		{
			yyVAL.options = nil
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:135
		{
			yyVAL.strlist = []string{yyDollar[1].strval}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:137
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].strval)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:140
		{
			yyVAL.strlist = []string{yyDollar[1].strval}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].strval)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:148
		{
			yyVAL.strval = yyDollar[2].strval
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.key = yyDollar[2].key
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.strval = yyDollar[2].strval
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.metrics = nil
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.metrics = append(yyVAL.metrics, yyDollar[3].metric)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.metric = &memconfig.MetricDef{}
			for _, l := range yyDollar[1].strlist {
				label := &memconfig.LabelDef{}
				label.SetName(l)
				yyVAL.metric.AddLabel(label)
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.metric = &memconfig.MetricDef{}
			yyVAL.metric.SetMetricDescription(yyDollar[1].strval)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.metric = &memconfig.MetricDef{}
			opts := yyVAL.metric.GetOptions()
			for _, k := range yyDollar[3].options.GetKeys() {
				// TODO(denisacostaq@gmail.com): handle error
				v, _ := yyDollar[3].options.GetObject(k)
				opts.SetObject(k, v)
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:187
		{
			var mtrDescription string
			var mtrLabels []config.RextLabelDef
			var mtrOptions, labelOpts config.RextKeyValueStore
			const prex = "\"label_path:"
			for _, optinalField := range yyDollar[6].metrics {
				if len(optinalField.GetMetricDescription()) != 0 {
					mtrDescription = optinalField.GetMetricDescription()
				}
				if len(optinalField.GetLabels()) != 0 {
					labelOpts = memconfig.NewOptionsMap()
					if mtrLabels == nil {
						mtrLabels = optinalField.GetLabels()
					} else {
						// FIXME(denisacostaq@gmail.com): error multiple labels definitions
					}
				}
				if opts := optinalField.GetOptions(); len(opts.GetKeys()) != 0 {
					// TODO(denisacostaq@gmail.com): handle error
					mtrOptions = memconfig.NewOptionsMap()
					for _, k := range opts.GetKeys() {
						// TODO(denisacostaq@gmail.com): handle errors
						v, _ := opts.GetString(k)
						if strings.HasPrefix(k, prex) {
							// fmt.Println("dddddddddddddddddddddddddddddddddddddddddddddd", k)
							if labelOpts != nil {
								labelOpts.SetString(k, v)
							} else {
								// FIXME(denisacostaq@gmail.com):  handle error not labels defined
							}
						} else {
							mtrOptions.SetString(k, v)
						}
					}
				}
				// spew.Dump("TTTTTTTTTTTTTT", labelOpts)
				if len(optinalField.GetLabels()) > 0 && len(optinalField.GetLabels()) != len(labelOpts.GetKeys()) {
					// FIXME(denisacostaq@gmail.com):  handle error labels and paths size do not match
				}
			}
			if len(mtrDescription) == 0 {
				mtrDescription = "Metric extracted by [rextporter](https://github.com/simelo/rextporter)"
			}
			yyVAL.metric = &memconfig.MetricDef{}
			yyVAL.metric.SetMetricName(yyDollar[3].strval)
			yyVAL.metric.SetMetricType(yyDollar[5].key)
			yyVAL.metric.SetMetricDescription(mtrDescription)
			// spew.Dump("_____________", labelOpts)
			for _, l := range mtrLabels {
				// TODO(denisacostaq@gmail.com): handle errors
				str := prex + l.GetName()
				k := str[:len(prex)] + str[len(prex)+1:]
				lp, _ := labelOpts.GetString(k)
				var ns config.RextNodeSolver
				ns = &memconfig.NodeSolver{}
				ns.SetNodePath(lp)
				l.SetNodeSolver(ns)
				yyVAL.metric.AddLabel(l)
			}
			// spew.Dump("optsoptsoptsoptsopts", $$.GetLabels())
			if mtrOptions != nil {
				opts := yyVAL.metric.GetOptions()
				for _, k := range mtrOptions.GetKeys() {
					// TODO(denisacostaq@gmail.com): handle errors
					v, _ := mtrOptions.GetObject(k)
					// TODO(denisacostaq@gmail.com): handle errors and previously exist
					_, _ = opts.SetObject(k, v)
				}
			}
			fmt.Println("dddddddddddddddd")
			spew.Dump(yyVAL.metric.GetLabels())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.metrics = []config.RextMetricDef{yyDollar[1].metric}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.metrics = append(yyDollar[1].metrics, yyDollar[3].metric)
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.resource = &memconfig.ResourceDef{}
			var opts config.RextKeyValueStore
			if yyDollar[4].options != nil {
				// TODO(denisacostaq@gmail.com): handle errors
				opts, _ = yyDollar[4].options.Clone()
			}
			decoder := memconfig.NewDecoder(yyDollar[2].strval, opts)
			yyVAL.resource.SetDecoder(decoder)
			for _, mtr := range yyDollar[5].metrics {
				yyVAL.resource.AddMetricDef(mtr)
			}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.resource = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.resource = yyDollar[2].resource
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.resource = nil
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.resource = yyDollar[2].resource
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.resource = yyDollar[2].resource
			if yyDollar[1].options != nil {
				if yyVAL.resource == nil {
					yyVAL.resource = &memconfig.ResourceDef{}
				}
				opts := yyVAL.resource.GetOptions()
				for _, k := range yyDollar[1].options.GetKeys() {
					// TODO(denisacostaq@gmail.com): handle errors
					v, _ := yyDollar[1].options.GetObject(k)
					// TODO(denisacostaq@gmail.com): handle errors and previously exist
					_, _ = opts.SetObject(k, v)
				}
			}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:312
		{
			yyVAL.resource = yyDollar[5].resource
			if yyVAL.resource == nil {
				yyVAL.resource = &memconfig.ResourceDef{}
			}
			yyVAL.resource.SetResourceURI(yyDollar[4].strval)
			switch yyDollar[2].strval {
			// TODO(denisacostaq@gmail.com): solve this
			case "rest_api", "forward_metrics":
			default:
				fmt.Println("invalid type", yyDollar[2].strval)
			}
			// TODO(denisacostaq@gmail.com): $1
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.options = yyDollar[2].options
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:331
		{
			if yyDollar[1].key == "AUTH" {
				yyVAL.auth = &memconfig.HTTPAuth{}
				if yyDollar[2].strval == "rest_csrf" {
					yyVAL.auth.SetAuthType(config.AuthTypeCSRF)
				}
				if yyDollar[5].options != nil {
					opts := yyVAL.auth.GetOptions()
					for _, k := range yyDollar[5].options.GetKeys() {
						// TODO(denisacostaq@gmail.com): handle errors
						v, _ := yyDollar[5].options.GetObject(k)
						// TODO(denisacostaq@gmail.com): handle errors and previously exist
						_, _ = opts.SetObject(k, v)
					}
				}
			} else {
				yyVAL.auth = nil
			}
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.options = nil
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.options = yyDollar[3].options
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.services = nil /*$2*/
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.services = nil
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.services = nil /*$1*/
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:371
		{
			for _, id := range yyDollar[2].strlist {
				srv := &memconfig.Service{}
				srv.SetBasePath(id)
				yyVAL.services = append(yyVAL.services, srv)
			}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.services = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.services = yyDollar[1].services
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:385
		{
			service.SetAuthForBaseURL(yyDollar[1].auth)
			yyVAL.resource = nil
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.resource = yyDollar[1].resource
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.service = nil
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:397
		{
			if yyDollar[2].resource != nil {
				service.AddResource(yyDollar[2].resource)
			}
			yyVAL.service = service
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:408
		{
			spew.Dump(yyDollar[7].service)
			// fmt.Println(len($7.GetResources()))
			for _, srv := range yyDollar[4].services {
				// service.SetName(srv)
				fmt.Println(srv)
			}
			// env = $1
			// $$ = env.NewServiceScraper()
			// if $5 != nil {
			//   // TODO : Error handling
			//   _ = env.RegisterScraperForServices($5...)
			// }
			// if $6 != nil {
			//   // TODO : Error handling
			//   _ = env.RegisterScraperForServices($6...)
			// }
			// if $7 != nil {
			//   util.MergeStoresInplace($$.GetOptions(), $7)
			// }
			// for _, mainsec := range $8 {
			//   if mainsec.src != nil {
			//     $$.AddSource(mainsec.src)
			//   } else if mainsec.value != nil {
			//     if auth, isAuth := mainsec.value.(core.RextAuth); isAuth {
			//       $$.AddAuthStrategy(auth, mainsec.key)
			//     }
			//     // TODO : Error handling
			//   }
			//   // TODO : Error handling
			// }
		}
	}
	goto yystack /* stack new state and value */
}
