// Code generated by goyacc parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package main

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"errors"
	"fmt"
	"github.com/simelo/rextporter/src/config"
	"github.com/simelo/rextporter/src/core"
	// "github.com/davecgh/go-spew/spew"
	// "github.com/simelo/rextporter/src/util"
)

var (
	ErrBlockLevelUnderflow = errors.New("End of block is not possible beyond DATABASE")
	ErrBlockLevelOverflow  = errors.New("Too many nested syntax levels")
)

type parserEnv struct {
	env     core.RextEnv
	scraper core.RextServiceScraper
}

type strTuple struct {
	key string
	val string
}

type mainSecTuple struct {
	src core.RextDataSource
	key string
	val interface{}
}

type metricDef struct {
	mname string
	mtype string
	mdesc string
	mlbls []string
	opts  core.RextKeyValueStore
}

// FIXME : Not global. Parser stack ? TLS ?
var root parserEnv
var metric metricDef

// TODO: metricDef should implement core.RextMetricDef

func value_for_str(str string) string {
	// FIXME: Support string literals
	return str[1 : len(str)-1]
}

func newOption() core.RextKeyValueStore {
	return config.NewOptionsMap()
}

func newStrTuple(s1, s2 string) *strTuple {
	return &strTuple{
		key: s1,
		val: s2,
	}
}

func newMainDef(key string, value interface{}) *mainSecTuple {
	return &mainSecTuple{
		src: nil,
		key: key,
		val: value,
	}
}

func newMainSrc(src core.RextDataSource) *mainSecTuple {
	return &mainSecTuple{
		src: src,
		key: "",
		val: nil,
	}
}

func getRootEnv() *parserEnv {
	return &root
}

func (m *metricDef) GetMetricName() string {
	return m.mname
}

func (m *metricDef) GetMetricType() string {
	return m.mtype
}

func (m *metricDef) GetMetricDescription() string {
	return m.mdesc
}

func (m *metricDef) GetMetricLabels() []string {
	return m.mlbls
}

func (m *metricDef) SetMetricName(name string) {
	m.mname = name
}

func (m *metricDef) SetMetricType(typeid string) {
	m.mtype = typeid
}

func (m *metricDef) SetMetricDescription(desc string) {
	m.mdesc = desc
}

func (m *metricDef) SetMetricLabels(labels []string) {
	m.mlbls = labels
}

func (m *metricDef) GetOptions() core.RextKeyValueStore {
	return nil
}

//line parser.go.y:123
type yySymType struct {
	yys      int
	root     core.RextServiceScraper
	options  core.RextKeyValueStore
	mains    []mainSecTuple
	mainsec  *mainSecTuple
	exts     []core.RextMetricsExtractor
	extract  core.RextMetricsExtractor
	metrics  []core.RextMetricDef
	metric   core.RextMetricDef
	key      string
	strval   string
	strlist  []string
	pair     *strTuple
	identVal int
}

const COUNTER = 57346
const GAUGE = 57347
const HISTOGRAM = 57348
const SUMMARY = 57349
const COMMA = 57350
const STR_LITERAL = 57351
const RESOURCE_PATH = 57352
const AS = 57353
const BIE = 57354
const BLK = 57355
const EOB = 57356
const EOL = 57357
const CTX = 57358
const DATASET = 57359
const DEFINE_AUTH = 57360
const DESCRIPTION = 57361
const EXTRACT_USING = 57362
const FOR_SERVICE = 57363
const FOR_STACK = 57364
const FROM = 57365
const HELP = 57366
const GET = 57367
const IDENTIFIER = 57368
const LABELS = 57369
const METRIC = 57370
const NAME = 57371
const POST = 57372
const SET = 57373
const TO = 57374
const TYPE = 57375

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"COUNTER",
	"GAUGE",
	"HISTOGRAM",
	"SUMMARY",
	"COMMA",
	"STR_LITERAL",
	"RESOURCE_PATH",
	"AS",
	"BIE",
	"BLK",
	"EOB",
	"EOL",
	"CTX",
	"DATASET",
	"DEFINE_AUTH",
	"DESCRIPTION",
	"EXTRACT_USING",
	"FOR_SERVICE",
	"FOR_STACK",
	"FROM",
	"HELP",
	"GET",
	"IDENTIFIER",
	"LABELS",
	"METRIC",
	"NAME",
	"POST",
	"SET",
	"TO",
	"TYPE",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:389

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 89

var yyAct = [...]int{

	17, 63, 16, 54, 74, 36, 32, 19, 70, 64,
	38, 37, 15, 33, 18, 84, 41, 14, 34, 11,
	8, 55, 4, 66, 65, 51, 24, 24, 76, 71,
	57, 20, 12, 3, 88, 56, 67, 60, 48, 35,
	26, 45, 5, 13, 40, 43, 49, 79, 78, 80,
	81, 50, 2, 87, 72, 21, 58, 42, 39, 25,
	22, 59, 9, 61, 10, 6, 7, 68, 75, 83,
	73, 69, 82, 44, 85, 62, 29, 27, 28, 23,
	30, 31, 77, 86, 46, 47, 53, 52, 1,
}
var yyPact = [...]int{

	18, -1000, 5, -1000, 29, -1, -3, 17, -14, -24,
	16, -14, -1000, 52, -1000, -1000, -1000, 12, -1000, 50,
	-1000, 52, -14, -12, -24, -27, -1000, -1000, -1000, -1000,
	-15, -16, -1000, -1000, -1000, -1000, 49, 33, -7, -1000,
	48, 35, 28, 25, -1000, -24, -1000, -1000, -24, 11,
	1, -1000, 21, 15, -1000, 47, -1000, 1, 24, -1000,
	-24, -19, 9, -1000, 23, -19, -1000, -21, -1000, 14,
	45, -29, -1000, 13, 43, -1000, -9, -1000, -1000, -1000,
	-1000, -1000, -24, -1000, 44, 20, 12, -1000, -1000,
}
var yyPgo = [...]int{

	0, 88, 3, 87, 86, 85, 84, 82, 81, 80,
	79, 78, 77, 76, 1, 75, 0, 2, 74, 73,
	14, 73, 43, 73, 72, 71, 70, 69, 68, 17,
	66, 65, 64, 62, 52,
}
var yyR1 = [...]int{

	0, 9, 8, 8, 7, 7, 7, 7, 29, 20,
	16, 16, 21, 21, 22, 22, 23, 25, 26, 27,
	28, 28, 24, 18, 18, 17, 17, 14, 15, 15,
	2, 3, 3, 4, 4, 6, 6, 5, 13, 11,
	19, 19, 32, 33, 33, 30, 31, 31, 12, 12,
	10, 10, 34, 34, 1,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 3, 1, 3, 1, 3, 2, 2, 2, 2,
	0, 2, 0, 0, 1, 0, 1, 9, 1, 3,
	6, 0, 1, 1, 3, 0, 1, 4, 5, 5,
	0, 3, 2, 0, 2, 2, 0, 2, 1, 1,
	0, 2, 0, 1, 7,
}
var yyChk = [...]int{

	-1000, -1, -34, 15, 17, 13, -31, -30, 21, -33,
	-32, 22, 15, -22, -29, 26, -17, -16, -20, 31,
	15, -22, 8, -10, 15, 9, -29, -12, -11, -13,
	-9, -8, 18, 25, 30, -20, 32, 26, 26, 9,
	11, 23, 9, 10, -19, 13, -6, -5, 13, -16,
	-17, 14, -3, -4, -2, 20, 14, 15, 9, -2,
	13, -17, -15, -14, 28, 15, 14, 13, -14, -25,
	29, 15, 9, -26, 33, -28, 15, -7, 5, 4,
	6, 7, -24, -27, 24, -18, -16, 9, 14,
}
var yyDef = [...]int{

	52, -2, 0, 53, 0, 46, 43, 0, 0, 25,
	0, 0, 47, 45, 14, 8, 50, 26, 10, 0,
	44, 42, 0, 54, 0, 0, 15, 51, 48, 49,
	0, 0, 1, 2, 3, 11, 0, 0, 0, 9,
	0, 0, 40, 35, 39, 0, 38, 36, 25, 0,
	31, 41, 0, 32, 33, 0, 37, 0, 0, 34,
	25, 0, 0, 28, 0, 0, 30, 0, 29, 0,
	0, 0, 17, 20, 0, 22, 0, 18, 4, 5,
	6, 7, 23, 21, 0, 0, 24, 19, 27,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.key = "AUTH"
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:186
		{
			fmt.Println("0000000000000000000000000000000000000")
			yyVAL.key = yyDollar[1].key
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.key = yyDollar[1].key
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.key = config.KeyMetricTypeGauge
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.key = config.KeyMetricTypeCounter
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.key = config.KeyMetricTypeHistogram
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.key = config.KeyMetricTypeSummary
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.strval = yyDollar[1].strval
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.pair = newStrTuple(yyDollar[2].strval, yyDollar[4].strval)
			fmt.Println("oOo", yyVAL.pair)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.options = newOption()
			// TODO: Error handling
			_, _ = yyVAL.options.SetString(yyDollar[1].pair.key, yyDollar[1].pair.val)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:213
		{
			// TODO: Error handling
			_, _ = yyDollar[1].options.SetString(yyDollar[3].pair.key, yyDollar[3].pair.val)
			yyVAL.options = yyDollar[1].options
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.strlist = []string{yyDollar[1].strval}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].strval)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.strlist = []string{yyDollar[1].strval}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].strval)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.strval = yyDollar[2].strval
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.strval = yyDollar[2].key
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.strval = yyDollar[2].strval
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.strval = "Metric extracted by [rextporter](https://github.com/simelo/rextporter)"
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.strval = yyDollar[2].strval
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.strlist = nil
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.options = nil
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.options = yyDollar[1].options
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.options = nil
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:251
		{
			fmt.Println("ppppppppppppp")
			yyVAL.options = yyDollar[1].options
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:253
		{
			mm := metricDef{
				mname: yyDollar[3].strval,
				mtype: yyDollar[5].strval,
				mdesc: yyDollar[6].strval,
				mlbls: yyDollar[7].strlist,
				opts:  yyDollar[8].options,
			}
			fmt.Println(mm)
			yyVAL.metric = nil
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.metrics = nil /*[]metricDef{ $1 }*/
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.metrics = append(yyDollar[1].metrics, yyDollar[3].metric)
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:269
		{
			// env := getRootEnv()
			yyVAL.extract = nil //env.NewMetricsExtractor($2, $4, $5)
			// for _, md := range $6 {
			//   $$.AddMetricRule(&md)
			// }
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.exts = nil
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.exts = yyDollar[1].exts
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:284
		{
			fmt.Println("///////////////////////////")
			yyVAL.exts = []core.RextMetricsExtractor{yyDollar[1].extract}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:286
		{
			fmt.Println("jjjjjjjjjjj")
			yyVAL.exts = append(yyDollar[1].exts, yyDollar[3].extract)
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.exts = nil
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:292
		{
			fmt.Println("srcsecsufixsrcsecsufixsrcsecsufix")
			yyVAL.exts = yyDollar[1].exts
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:297
		{
			//  fmt.Println("aaaaaaaaaaaaaa", $3)
			//   // FIXME: Error handling
			//   // _ = util.MergeStoresInplace(dsGetOptions(), $2)
			//   $$ = $3
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:305
		{
			fmt.Println("ttttttttttttttttt")
			// fmt.Println("1111111111111")
			// env := getRootEnv().env
			// // TODO error handling
			// ds, _ := env.NewMetricsDatasource($2)
			// ds.SetMethod($1)
			// ds.SetResourceLocation($4)
			// $$ = newMainSrc(ds)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:316
		{
			fmt.Println("hhhhhhhhhhhhhhhhhhhh", yyDollar[5].options)
			// env := getRootEnv()
			// if defverb == 'AUTH' {
			//   $$ = newMainDef($4, env.NewAuthStrategy($2, $5))
			// }
			// TODO: Error handling
			yyVAL.mainsec = nil
			fmt.Println("end hhhhhhhhhhhhhhhhhhhhhh")
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:327
		{
			fmt.Println("LLRRRRRRRRRLLLLLLLL")
			yyVAL.options = nil
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:329
		{
			fmt.Println("LLLLLLLLLL")
			yyVAL.options = yyDollar[2].options
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.strlist = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.strlist = yyDollar[1].strlist
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:347
		{
			fmt.Println("1111110000010101000000000000000000000000000000000011111111111111111")
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.strlist = nil
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.strlist = yyDollar[1].strlist
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:353
		{
			fmt.Println("mainseeeeeeeecc 1")
			yyVAL.mainsec = yyDollar[1].mainsec
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:355
		{
			fmt.Println("mainseeeeeeeecc 2")
			yyVAL.mainsec = yyDollar[1].mainsec
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:357
		{
			fmt.Println("mainnnnnnnnnnnnnnblk 1")
			yyVAL.mains = nil /*[]mainSecTuple { $1 }*/
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:359
		{
			fmt.Println("mainnnnnnnnnnnnnnblk 2")
			yyVAL.mains = nil /*append($1, $3)*/
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:363
		{
			// env = $1
			// $$ = env.NewServiceScraper()
			// if $5 != nil {
			//   // TODO : Error handling
			//   _ = env.RegisterScraperForServices($5...)
			// }
			// if $6 != nil {
			//   // TODO : Error handling
			//   _ = env.RegisterScraperForServices($6...)
			// }
			// if $7 != nil {
			//   util.MergeStoresInplace($$.GetOptions(), $7)
			// }
			// for _, mainsec := range $8 {
			//   if mainsec.src != nil {
			//     $$.AddSource(mainsec.src)
			//   } else if mainsec.value != nil {
			//     if auth, isAuth := mainsec.value.(core.RextAuth); isAuth {
			//       $$.AddAuthStrategy(auth, mainsec.key)
			//     }
			//     // TODO : Error handling
			//   }
			//   // TODO : Error handling
			// }
		}
	}
	goto yystack /* stack new state and value */
}
